// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  resumes  Resume[]
  Profile  Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  website   String?
  linkedin  String?
  github    String?
  summary   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id          String       @id @default(cuid())
  userId      String
  title       String
  template    String       @default("modern")
  content     Json
  isPublic    Boolean      @default(false)
  slug        String?      @unique
  atsScore    Float?
  aiOptimized Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  experiences  Experience[]
  educations   Education[]
  skills       Skill[]
  projects     Project[]
  certificates Certificate[]
  analytics    Analytics[]
}

model Experience {
  id          String    @id @default(cuid())
  resumeId    String
  company     String
  position    String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String    @db.Text
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id          String    @id @default(cuid())
  resumeId    String
  school      String
  degree      String
  field       String?
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  gpa         String?
  description String?   @db.Text
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String     @id @default(cuid())
  resumeId  String
  name      String
  level     SkillLevel @default(INTERMEDIATE)
  category  String?
  order     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  resumeId    String
  title       String
  description String   @db.Text
  technologies String[]
  url         String?
  github      String?
  startDate   DateTime?
  endDate     DateTime?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Certificate {
  id           String    @id @default(cuid())
  resumeId     String
  name         String
  issuer       String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  url          String?
  order        Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(cuid())
  resumeId  String
  views     Int      @default(0)
  downloads Int      @default(0)
  shares    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([resumeId])
}

enum Plan {
  FREE
  PREMIUM
  PROFESSIONAL
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}
